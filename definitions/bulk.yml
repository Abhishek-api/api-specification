openapi: 3.0.0
info:
  title: Vonage Bulk API
  description: REST APIs for VCP Bulk Jobs & Lists
  version: 0.1.0
  contact:
    name: Nexmo.com
    email: devrel@nexmo.com
    url: "https://developer.nexmo.com/"
    x-twitter: Nexmo
  termsOfService: "https://www.nexmo.com/terms-of-use"
  license:
    name: The MIT License (MIT)
    url: "https://opensource.org/licenses/MIT"
  x-logo:
    url: "https://twitter.com/Nexmo/profile_image?size=original"
  x-apiClientRegistration: "https://dashboard.nexmo.com/sign-up"
  x-label: Alpha
tags:
  - name: actions
  - name: events
  - name: items
  - name: jobs
  - name: lists
  - name: runs
  - name: webhooks
servers:
  - url: https://api-eu.vonage.com/v0.1/bulk
    description: prod env in EU geo
security:
  - bearerAuth: []
paths:
  /lists:
    get:
      operationId: findAllLists
      summary: Find all lists
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: List of lists associated with an application
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          lists:
                            type: array
                            readOnly: true
                            items:
                              $ref: "#/components/schemas/ListDto"
      tags:
        - lists
    post:
      operationId: createList
      summary: Create list
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateListDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDto"
      tags:
        - lists
  /lists/{list_id}:
    parameters:
      - $ref: "#/components/parameters/ListId"
    get:
      operationId: getList
      summary: Get list by id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDto"
      tags:
        - lists
    put:
      operationId: updateList
      summary: Update list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateListDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDto"
      tags:
        - lists
    delete:
      operationId: deleteList
      summary: Delete list
      responses:
        "200":
          description: ""
      tags:
        - lists
  /lists/{list_id}/reset:
    parameters:
      - $ref: "#/components/parameters/ListId"
    post:
      operationId: resetList
      summary: Reset list - delete all items
      responses:
        "200":
          description: ""
      tags:
        - lists
  /lists/{list_id}/refresh:
    parameters:
      - $ref: "#/components/parameters/ListId"
    post:
      operationId: refreshList
      summary: Refresh list - delete all items and sync from the datasource. Refresh is invalid for manual list
      responses:
        "200":
          description: ""
      tags:
        - lists
  /lists/{list_id}/items:
    parameters:
      - $ref: "#/components/parameters/ListId"
    get:
      operationId: listItems
      summary: Iterate over list items
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          items:
                            type: array
                            readOnly: true
                            items:
                              $ref: "#/components/schemas/ListItemDto"
      tags:
        - items
    post:
      operationId: createListItem
      summary: Create list item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateListItemDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItemDto"
      tags:
        - items
  /lists/{list_id}/items/download:
    parameters:
      - $ref: "#/components/parameters/ListId"
    get:
      operationId: downloadItems
      summary: Download list items
      responses:
        "200":
          description: ""
      tags:
        - items
  /lists/{list_id}/items/{item_id}:
    parameters:
      - $ref: "#/components/parameters/ListId"
      - $ref: "#/components/parameters/ItemId"
    get:
      operationId: getListItem
      summary: Get list item by id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItemDto"
      tags:
        - items
    put:
      operationId: updateListItem
      summary: Update list item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateListItemDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListItemDto"
      tags:
        - items
    delete:
      operationId: deleteListItem
      summary: Delete list item
      responses:
        "200":
          description: ""
      tags:
        - items
  /lists/{list_id}/items/import:
    parameters:
      - $ref: "#/components/parameters/ListId"
    post:
      operationId: importItems
      summary: Import list items
      responses:
        "200":
          description: ""
      tags:
        - items
  /actions:
    get:
      operationId: findAllActions
      summary: Find all actions
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          actions:
                            type: array
                            readOnly: true
                            items:
                              $ref: "#/components/schemas/ActionDto"
      tags:
        - actions
    post:
      operationId: createAction
      summary: Create action_call
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateActionDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDto"
      tags:
        - actions
  /actions/{action_id}:
    parameters:
      - $ref: "#/components/parameters/ActionId"
    get:
      operationId: getAction
      summary: Get action by id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDto"
      tags:
        - actions
    put:
      operationId: updateAction
      summary: Update action_call
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateActionDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDto"
      tags:
        - actions
    delete:
      operationId: deleteAction
      summary: Delete action_call
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDto"
      tags:
        - actions
  /jobs:
    get:
      operationId: findAllJobs
      summary: Find all jobs
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          jobs:
                            type: array
                            readOnly: true
                            items:
                              $ref: "#/components/schemas/JobDto"
      tags:
        - jobs
    post:
      operationId: createJob
      summary: Create job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobDto"
      tags:
        - jobs
  /jobs/{job_id}:
    parameters:
      - $ref: "#/components/parameters/JobId"
    get:
      operationId: getJob
      summary: Get job by id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobDto"
      tags:
        - jobs
    put:
      operationId: updateJob
      summary: Update job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJobDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobDto"
      tags:
        - jobs
    delete:
      operationId: deleteJob
      summary: Delete job
      responses:
        "200":
          description: ""
      tags:
        - jobs
  /events:
    get:
      operationId: findEventsAll
      summary: Get events
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          events:
                            type: array
                            readOnly: true
                            items:
                              oneOf:
                                - $ref: "#/components/schemas/ActionCallSucceededEvent"
                                - $ref: "#/components/schemas/ActionCallFailedEvent"
                                - $ref: "#/components/schemas/ActionCallInfoEvent"
                                - $ref: "#/components/schemas/RecipientResponseEvent"
      tags:
        - events
  /runs:
    get:
      operationId: findAllRuns
      summary: Find all runs
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          runs:
                            type: array
                            readOnly: true
                            items:
                              $ref: "#/components/schemas/ActionDto"
      tags:
        - runs
    post:
      operationId: scheduleAtRun
      summary: Start job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobRunDto"
      responses:
        "202":
          description: ""
      tags:
        - runs
  /runs/{run_id}:
    parameters:
      - $ref: "#/components/parameters/RunId"
    get:
      operationId: getJobRun
      summary: Get job run by id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobRunDto"
      tags:
        - runs
  /runs/{run_id}/events:
    parameters:
      - $ref: "#/components/parameters/RunId"
    get:
      operationId: findEventsAllRun
      summary: Get job run events
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageResponseDto"
                  - properties:
                      _embedded:
                        type: object
                        readOnly: true
                        properties:
                          events:
                            type: array
                            readOnly: true
                            items:
                              oneOf:
                                - $ref: "#/components/schemas/ActionCallSucceededEvent"
                                - $ref: "#/components/schemas/ActionCallFailedEvent"
                                - $ref: "#/components/schemas/ActionCallInfoEvent"
                                - $ref: "#/components/schemas/RecipientResponseEvent"
      tags:
        - runs
  /runs/{run_id}/summary:
    parameters:
      - $ref: "#/components/parameters/RunId"
    get:
      operationId: getTotalStats
      summary: Get action runs and recipient responses statistics overview
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsRunSummaryDto"
      tags:
        - runs
  /runs/{run_id}/stop:
    parameters:
      - $ref: "#/components/parameters/RunId"
    post:
      operationId: stopJobRun
      summary: Initiate run stop
      responses:
        "202":
          description: ""
      tags:
        - runs
  /webhooks/actions/status:
    post:
      operationId: actionStatus
      summary: Webhook endpoint to handle action call status for async actions
      responses:
        "200":
          description: ""
      tags:
        - webhooks
      security:
        - {}
  /webhooks/recipients/responses:
    post:
      operationId: recipientResponse
      summary: Webhook endpoint to handle recipient responses
      responses:
        "200":
          description: ""
      tags:
        - webhooks
      security:
        - {}
components:
  securitySchemes:
    bearerAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
  parameters:
    Page:
      name: page
      description: Page of results to jump to
      in: query
      schema:
        minimum: 1
        default: 1
        type: number
      required: false
      example: 1

    PageSize:
      name: page_size
      description: Number of results per page
      in: query
      schema:
        minimum: 1
        maximum: 1000
        default: 100
        type: number
      required: false
      example: 100

    ListId:
      name: list_id
      in: path
      description: Unique identifier for a list
      required: true
      schema:
        $ref: "#/components/schemas/ListId"

    ItemId:
      name: item_id
      in: path
      description: Unique identifier for a list item
      required: true
      schema:
        $ref: "#/components/schemas/ItemId"

    ActionId:
      name: action_id
      in: path
      description: Unique identifier for an action
      required: true
      schema:
        $ref: "#/components/schemas/ActionId"

    JobId:
      name: job_id
      in: path
      description: Unique identifier for a job
      required: true
      schema:
        $ref: "#/components/schemas/JobId"

    RunId:
      name: run_id
      in: path
      description: Unique identifier for a run
      required: true
      schema:
        $ref: "#/components/schemas/RunId"

  schemas:
    ListId:
      type: string
      format: uuid
      example:
        $ref: "#/components/examples/ManualList/value/id"

    ItemId:
      type: string
      format: uuid
      example:
        $ref: "#/components/examples/ListItem/value/id"

    ActionId:
      type: string
      format: uuid
      example:
        $ref: "#/components/examples/SendSMS/value/id"

    JobId:
      type: string
      format: uuid
      example:
        $ref: "#/components/examples/SegmentationJob/value/id"

    RunId:
      type: string
      format: uuid
      example:
        $ref: "#/components/examples/SegmentationRun/value/id"

    PageQueryDto:
      type: object
      properties:
        page:
          type: number
          minimum: 1
          default: 1
          example: 1
        page_size:
          type: number
          minimum: 1
          maximum: 1000
          default: 100
          example: 100

    Href:
      type: object
      properties:
        href:
          type: string
          format: url
          example: https://api-eu.vonage.com/v0.1/bulk/lists?page=5&page_size=10
      required:
        - href

    HalLinks:
      type: object
      properties:
        first:
          $ref: "#/components/schemas/Href"
        prev:
          $ref: "#/components/schemas/Href"
        self:
          $ref: "#/components/schemas/Href"
        next:
          $ref: "#/components/schemas/Href"
      required:
        - first
        - prev
        - self
        - next

    PageResponseDto:
      type: object
      properties:
        total_items:
          type: number
          readOnly: true
          example: 10000
        total_pages:
          type: number
          readOnly: true
          example: 50
        page:
          type: number
          readOnly: true
          minimum: 1
          example: 1
        page_size:
          type: number
          readOnly: true
          example: 250
        _links:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/HalLinks"
        _embedded:
          type: object
          additionalProperties: true
          readOnly: true
      required:
        - total_items
        - total_pages
        - page
        - page_size
        - _links
        - _embedded

    BulkBase:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          format: uuid
          example: 29192c4a-4058-49da-86c2-3e349d1065b7
        created_at:
          format: date-time
          type: string
          readOnly: true
          example: "2022-06-19T17:59:28.085Z"
        updated_at:
          format: date-time
          type: string
          readOnly: true
          example: "2022-06-19T17:59:28.085Z"
      required:
        - id
        - created_at
        - updated_at

    ListLabelDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          example: first_name
        alias:
          type: string
          maxLength: 50
        key:
          type: object
          default: false
      required:
        - name

    ListDto:
      allOf:
        - $ref: "#/components/schemas/BulkBase"
        - $ref: "#/components/schemas/CreateListDto"
        - type: object
          properties:
            type:
              type: string
              readOnly: true
              enum:
                - salesforce
                - manual
              example: salesforce
            sync_status:
              type: string
              readOnly: true
              enum:
                - configured
                - syncing
                - resetting
                - refreshing
                - paused
                - stopped
                - completed
                - failed
              example: configured
            items_count:
              type: number
              readOnly: true
              example: 10000

    CreateListDto:
      allOf:
        - $ref: "#/components/schemas/UpdateListDto"
      required:
        - name

    UpdateListDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          example: Recipients for demo
        description:
          type: string
          maxLength: 1024
        tags:
          minItems: 0
          maxItems: 10
          type: array
          items:
            type: string
        labels:
          minItems: 0
          maxItems: 50
          type: array
          items:
            $ref: "#/components/schemas/ListLabelDto"
        datasource:
          discriminator:
            propertyName: type
          oneOf:
            - $ref: "#/components/schemas/SalesforceDatasource"

    ListDatasourceBaseDto:
      type: object
      properties:
        type:
          type: string
          default: salesforce
          enum:
            - salesforce
          example: salesforce
      required:
        - type

    SalesforceDatasource:
      type: object
      properties:
        type:
          type: string
          default: salesforce
          enum:
            - salesforce
          example: salesforce
        integration_id:
          type: string
          example: salesforce_credentials
        soql:
          type: string
          example: select Id, LastName, FirstName, Phone, Email FROM Contact
      required:
        - type
        - integration_id
        - soql

    ListItemDto:
      allOf:
        - $ref: "#/components/schemas/BulkBase"
        - $ref: "#/components/schemas/CreateListItemDto"
        - type: object
          properties:
            list_id:
              $ref: "#/components/schemas/ListId"
            data:
              type: object
              additionalProperties: true
              minProperties: 1
              maxProperties: 20
              example:
                firstName: Adrianna
                lastName: Renner
                number: 715-268-2905
          required:
            - list_id
            - data

    ApiChangedDto:
      type: object
      properties:
        inserted:
          type: number
        updated:
          type: number
        deleted:
          type: number

    CreateListItemDto:
      allOf:
        - $ref: "#/components/schemas/UpdateListItemDto"
      required:
        - data

    UpdateListItemDto:
      type: object
      properties:
        data:
          type: object
          additionalProperties: true
          minProperties: 1
          maxProperties: 20
          example:
            firstName: Adrianna
            lastName: Renner
            number: 715-268-2905

    ActionParameterDefinitionDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - string
            - secret
          default: string
          example: string
        name:
          type: string
          example: from
        required:
          type: boolean
          default: true
          example: true
        default:
          type: string
      required:
        - type # todo if attribute has a default, it shouldn't be required
        - name
        - required # has default

    ActionParameterValueDto:
      type: object
      properties:
        name:
          type: string
          example: from_number
        value:
          type: string
          example: 715-268-2905
      required:
        - name
        - value

    ActionHttpResponseSuccessDto:
      type: object
      properties:
        codes:
          default:
            - "200"
          example:
            - 200
          type: array
          items:
            type: string
      required:
        - codes

    ActionHttpErrorDto:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
          example: failed to run
      required:
        - details

    ActionHttpResponseDto:
      type: object
      properties:
        invocation_id:
          type: string
        success:
          $ref: "#/components/schemas/ActionHttpResponseSuccessDto"
        error:
          $ref: "#/components/schemas/ActionHttpErrorDto"

    ActionHttpAsyncStatusValuesDto:
      type: object
      properties:
        values:
          minItems: 1
          maxItems: 10
          example:
            - "202"
          type: array
          items:
            type: string
      required:
        - values

    ActionHttpAsyncErrorStatusDto:
      type: object
      properties:
        values:
          minItems: 1
          maxItems: 10
          example:
            - "202"
          type: array
          items:
            type: string
        details:
          type: string
          example: "{{ event.error.details }}"
      required:
        - values
        - details

    ActionHttpAsyncStatusDto:
      type: object
      properties:
        value:
          type: string
          example: "200"
        success:
          example: "200"
          allOf:
            - $ref: "#/components/schemas/ActionHttpAsyncStatusValuesDto"
        error:
          $ref: "#/components/schemas/ActionHttpAsyncErrorStatusDto"
        info:
          $ref: "#/components/schemas/ActionHttpAsyncStatusValuesDto"
      required:
        - value
        - success

    ActionHttpAsyncDto:
      type: object
      properties:
        invocation_id:
          type: string
          example: "{{ event.reqId }}"
        status:
          example:
            success:
              values:
                - ok
            error:
              values:
                - failed
              details: "{{ event.error.details }}"
            info:
              values:
                - submitted
            value: "{{ event.status }}"
          allOf:
            - $ref: "#/components/schemas/ActionHttpAsyncStatusDto"
      required:
        - invocation_id
        - status

    HttpApiInvokeDto:
      type: object
      properties:
        type:
          type: string
          default: http-api-invoke
          enum:
            - http-api-invoke
          example: http-api-invoke
        url:
          type: string
          example: https://api.nexmo.com/v1/messages
        method:
          type: string
          default: post
          example: post
        headers:
          type: array
          items:
            $ref: "#/components/schemas/ActionParameterValueDto"
        payload:
          type: object
        response:
          $ref: "#/components/schemas/ActionHttpResponseDto"
        async:
          $ref: "#/components/schemas/ActionHttpAsyncDto"
      required:
        - type
        - url
        - method

    ActionDto:
      allOf:
        - $ref: "#/components/schemas/BulkBase"
        - $ref: "#/components/schemas/CreateActionDto"

    CreateActionDto:
      allOf:
        - $ref: "#/components/schemas/UpdateActionDto"
      required:
        - name
        - command

    UpdateActionDto:
      type: object
      properties:
        name:
          type: string
          example: send-sms
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/ActionParameterDefinitionDto"
        command:
          discriminator:
            propertyName: type
          oneOf:
            - $ref: "#/components/schemas/HttpApiInvokeDto"
          example:
            type: http-api-invoke
            url: https://api.nexmo.com/v1/messages
            method: post
        timeout_seconds:
          type: number
          default: 5
          minimum: 0
          maximum: 60

    ListRefDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ListId"
        type:
          type: string
          enum:
            - list
          example: list
      required:
        - id
        - type

    RecipientsDto:
      type: object
      properties:
        include:
          minItems: 1
          maxItems: 10
          example:
            - type: list
              id: 42a5313b-ea90-4166-a950-00eb6f95dfef
          type: array
          items:
            $ref: "#/components/schemas/ListRefDto"
        exclude:
          minItems: 1
          maxItems: 10
          type: array
          items:
            $ref: "#/components/schemas/ListRefDto"
      required:
        - include

    ExpressionDto:
      type: object
      properties:
        expression:
          type: object
          maxLength: 256
          example: item.salary > 5000
      required:
        - expression

    ActionRefDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c4fd1c9e-80e7-4db1-94cb-8ec0edc154a4
        type:
          type: string
          enum:
            - action
          example: action
      required:
        - id
        - type

    ActionCallDto:
      type: object
      properties:
        action_ref:
          $ref: "#/components/schemas/ActionRefDto"
        parameters:
          maxItems: 20
          type: array
          items:
            $ref: "#/components/schemas/ActionParameterValueDto"
      required:
        - action_ref

    MessageTemplateDto:
      type: object
      properties:
        type:
          type: string
          default: text
        message:
          type: object
          maxLength: 8112
          default: ""
          example: Hello {{ item.firstName }} {{ item.lastName }}
        encoding:
          type: string
          default: utf8
          enum:
            - utf8
      required:
        - message

    RecipientCorrelationDto:
      type: object
      properties:
        correlation_id:
          type: string
          example: "{{event.from}}"
      required:
        - correlation_id

    SegmentationDto:
      type: object
      properties:
        condition:
          $ref: "#/components/schemas/ExpressionDto"
        action_call:
          $ref: "#/components/schemas/ActionCallDto"
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 1024
        template:
          $ref: "#/components/schemas/MessageTemplateDto"
        recipient:
          $ref: "#/components/schemas/RecipientCorrelationDto"
      required:
        - condition
        - action_call
        - recipient

    EventMatcherDto:
      type: object
      properties:
        condition:
          $ref: "#/components/schemas/ExpressionDto"
        action_call:
          $ref: "#/components/schemas/ActionCallDto"
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 1024
        recipient:
          $ref: "#/components/schemas/RecipientCorrelationDto"
      required:
        - condition
        - action_call
        - recipient

    EventsHandlerDto:
      type: object
      properties:
        matching_strategy:
          type: string
          default: match-first
          enum:
            - match-first
            - match-all
          example: match-first
        matchers:
          type: array
          items:
            $ref: "#/components/schemas/EventMatcherDto"
      required:
        - matchers

    SegmentationJobDefinitionDto:
      type: object
      properties:
        type:
          type: string
          default: segmentation-job
          enum:
            - segmentation-job
          example: segmentation-job
        recipients:
          $ref: "#/components/schemas/RecipientsDto"
        segmentations:
          type: array
          items:
            $ref: "#/components/schemas/SegmentationDto"
        events_handler:
          $ref: "#/components/schemas/EventsHandlerDto"
      required:
        - type
        - recipients
        - segmentations

    JobDto:
      allOf:
        - $ref: "#/components/schemas/BulkBase"
        - $ref: "#/components/schemas/CreateJobDto"
        - type: object
          properties:
            name:
              type: string
              example: Greeting all
            tags:
              minItems: 0
              maxItems: 30
              type: array
              items:
                type: string
            definition:
              discriminator:
                propertyName: type
              oneOf:
                - $ref: "#/components/schemas/SegmentationJobDefinitionDto"
              example:
                name: text vip customers
                description: text UK and USA vip customers
                recipient:
                  correlation_id: "{{item.number}}"
                condition:
                  expression: item.salary == 1000 || ['UK', 'USA'].includes(item.country)
                action_call:
                  action_ref:
                    id: "{{sendSmsActionId}}"
                    type: action
                  parameters:
                    - name: fromNumber
                      value: "{{my_campaign_number}}"
                    - name: toNumber
                      value: "{{ item.number }}"
                    - name: message
                      value: "{{ template.message }}"
          required:
            - name
            - definition

    CreateJobDto:
      allOf:
        - $ref: "#/components/schemas/UpdateJobDto"
      required:
        - name
        - definition

    UpdateJobDto:
      type: object
      properties:
        name:
          type: string
          example: Greeting all
        tags:
          minItems: 0
          maxItems: 30
          type: array
          items:
            type: string
        definition:
          discriminator:
            propertyName: type
          oneOf:
            - $ref: "#/components/schemas/SegmentationJobDefinitionDto"
          example:
            name: text vip customers
            description: text UK and USA vip customers
            recipient:
              correlation_id: "{{item.number}}"
            condition:
              expression: item.salary == 1000 || ['UK', 'USA'].includes(item.country)
            action_call:
              action_ref:
                id: "{{sendSmsActionId}}"
                type: action
              parameters:
                - name: fromNumber
                  value: "{{my_campaign_number}}"
                - name: toNumber
                  value: "{{ item.number }}"
                - name: message
                  value: "{{ template.message }}"

    ActionCallSucceededEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 92cc64e5-f62b-464f-ab9c-4376bd05adfc
        event_type:
          type: string
          enum:
            - action-call-succeeded
            - action-call-failed
            - action-call-info
            - recipient-response
            - run-item-skipped
            - run-item-failed
          example: action-call-succeeded
          readOnly: true
        src_ctx:
          type: string
          example: uk recipient
        occurred_at:
          format: date-time
          type: string
          example: "2022-06-19T20:41:59.085Z"
        event_data:
          type: object
          example:
            city: North Assunta
            country: Iceland
            state: PH
        job_id:
          $ref: "#/components/schemas/JobId"
        job_run_id:
          $ref: "#/components/schemas/RunId"
        recipient_id:
          type: object
          example: "12025550135"
        action_id:
          type: string
          readOnly: true
          example: 125478b5-ef63-46e3-85d9-fdbee42c9242
        invocation_id:
          type: string
          example: 907cbc63-08de-4238-8fc9-8f9d67815d1b
      required:
        - id
        - event_type
        - src_ctx
        - occurred_at
        - event_data
        - job_id
        - job_run_id
        - recipient_id
        - action_id

    RecipientResponseEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 92cc64e5-f62b-464f-ab9c-4376bd05adfc
        event_type:
          type: string
          enum:
            - action-call-succeeded
            - action-call-failed
            - action-call-info
            - recipient-response
            - run-item-skipped
            - run-item-failed
          example: action-call-succeeded
        src_ctx:
          type: string
          example: uk recipient
        occurred_at:
          format: date-time
          type: string
          example: "2022-06-19T20:41:59.085Z"
        event_data:
          type: object
          example:
            city: North Assunta
            country: Iceland
            state: PH
        job_id:
          $ref: "#/components/schemas/JobId"
        job_run_id:
          $ref: "#/components/schemas/RunId"
        recipient_id:
          type: object
          example: "12025550135"
      required:
        - id
        - event_type
        - src_ctx
        - occurred_at
        - event_data
        - job_id
        - job_run_id
        - recipient_id

    StatsMetricDto:
      type: object
      properties:
        name:
          type: string
          readOnly: true
          example: recipient-response
        statistics:
          type: string
          readOnly: true
          enum:
            - recipient-distinct-count
          example: recipient-distinct-count
        value:
          type: number
          readOnly: true
          example: 226
        occurred_at_min:
          format: date-time
          type: string
          readOnly: true
        occurred_at_max:
          format: date-time
          type: string
          readOnly: true
      required:
        - name
        - statistics
        - value

    ActionCallInfoEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 92cc64e5-f62b-464f-ab9c-4376bd05adfc
        event_type:
          type: string
          enum:
            - action-call-succeeded
            - action-call-failed
            - action-call-info
            - recipient-response
            - run-item-skipped
            - run-item-failed
          example: action-call-succeeded
          readOnly: true
        src_ctx:
          type: string
          example: uk recipient
        occurred_at:
          format: date-time
          type: string
          example: "2022-06-19T20:41:59.085Z"
        event_data:
          type: object
          example:
            city: North Assunta
            country: Iceland
            state: PH
        job_id:
          $ref: "#/components/schemas/JobId"
        job_run_id:
          $ref: "#/components/schemas/RunId"
        recipient_id:
          type: object
          example: "12025550135"
        action_id:
          type: string
          readOnly: true
          example: a133c9e7-8cb8-4df9-a27f-b8e9065490da
        invocation_id:
          type: string
          example: a54c7944-ba11-45af-a146-3f0c9887d5f9
      required:
        - id
        - event_type
        - src_ctx
        - occurred_at
        - event_data
        - job_id
        - job_run_id
        - recipient_id
        - action_id

    EventErrorDto:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
          example: Not found
      required:
        - details

    ActionCallFailedEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 92cc64e5-f62b-464f-ab9c-4376bd05adfc
        event_type:
          type: string
          enum:
            - action-call-succeeded
            - action-call-failed
            - action-call-info
            - recipient-response
            - run-item-skipped
            - run-item-failed
          example: action-call-failed
          readOnly: true
        src_ctx:
          type: string
          example: uk recipient
        occurred_at:
          format: date-time
          type: string
          example: "2022-06-19T20:41:59.085Z"
        event_data:
          type: object
          example:
            city: North Assunta
            country: Iceland
            state: PH
        job_id:
          $ref: "#/components/schemas/JobId"
        job_run_id:
          $ref: "#/components/schemas/RunId"
        recipient_id:
          type: object
          example: "12025550135"
        action_id:
          type: string
          readOnly: true
          example: a133c9e7-8cb8-4df9-a27f-b8e9065490da
        invocation_id:
          type: string
          example: a54c7944-ba11-45af-a146-3f0c9887d5f9
        error:
          $ref: "#/components/schemas/EventErrorDto"
      required:
        - id
        - event_type
        - src_ctx
        - occurred_at
        - event_data
        - job_id
        - job_run_id
        - recipient_id
        - action_id

    JobRunDto:
      allOf:
        - $ref: "#/components/schemas/BulkBase"
        - $ref: "#/components/schemas/CreateJobRunDto"
        - type: object
          properties:
            status:
              type: string
              readOnly: true
              enum:
                - scheduled
                - running
                - paused
                - stopped
                - failed
                - completed
                - draft
              example: running

    CreateJobRunDto:
      type: object
      properties:
        name:
          type: string
          example: holiday run
        start_at:
          format: date-time
          type: string
          example: "2022-06-06T05:46:00.936Z"
        end_at:
          format: date-time
          type: string
          example: "2022-06-20T05:46:00.936Z"
        job_id:
          $ref: "#/components/schemas/JobId"
      required:
        - name
        - start_at
        - end_at
        - job_id

    StatsRunSummaryDto:
      type: object
      properties:
        job_run_id:
          $ref: "#/components/schemas/RunId"
        summary:
          readOnly: true
          example:
            - value: 3
              name: action-call-succeeded
              statistics: recipient-distinct-count
              occurred_at_min: "2022-06-20T05:52:49.063Z"
              occurred_at_max: "2022-06-20T05:52:49.099Z"
            - value: 0
              name: action-call-failed
              statistics: recipient-distinct-count
          type: array
          items:
            $ref: "#/components/schemas/StatsRunSummaryDto"
      required:
        - job_run_id
        - summary

  examples:
    ManualList:
      value:
        id: af8a84b6-c712-4252-ac8d-6e28ac9317ce
        name: Recipients for demo
        description: List of recipients for demo
        type: manual
        tags:
          - vip
        labels:
          - name: firstName
          - name: lastName
            key: false
          - name: number
            alias: phoneNumber
            key: true
        items_count: 1000
        sync_status: configured
        created_at: "2022-06-23T13:13:16.491Z"
        updated_at: "2022-06-23T13:13:16.491Z"

    ListItem:
      value:
        id: 945f6ca9-b6fa-4bd0-95c3-c4e1ecb15e2f
        list_id: af8a84b6-c712-4252-ac8d-6e28ac9317ce
        data:
          firstName: Jailyn
          lastName: Pacocha
          companyName: Kshlerin - Kiehn
          address: 376 Gutmann Ridges
          city: North Assunta
          country: Iceland
          state: PH
          zip: "89261"
          number: 950-707-5847
          email: Anya.West6@yahoo.com
          salary: 1000
        created_at: "2022-06-20T05:46:00.936Z"
        updated_at: "2022-06-20T05:46:00.936Z"

    SendSMS:
      value:
        id: 99ea10e0-1f14-4f55-b976-3c88ea8ec4cd
        name: vg-send-sms
        description: Send text message using Vonage messaging APIs
        parameters:
          - type: string
            required: true
            name: fromNumber
          - type: string
            required: true
            name: toNumber
          - type: string
            required: true
            name: message
          - type: secret
            required: true
            name: vonage-jwt-token
            default: vng-prd-messaging-api
        command:
          type: http-api-invoke
          url: https://api.nexmo.com/v1/messages
          method: post
          headers:
            - name: Content-Type
              value: application/json
            - name: Authorization
              value: Bearer {{ parameters.vonage-jwt-token }}
          payload:
            to: "{{ parameters.toNumber }}"
            message_type: text
            from: "{{ parameters.fromNumber }}"
            channel: sms
            text: "{{ parameters.message }}"
          response:
            success:
              codes:
                - "202"
            invocation_id: "{{response.payload.message_uuid}}"
            error:
              code: "{{response.payload.statusCode}}"
              details: "{{response.payload.error.details}}"
          async:
            invocation_id: "{{ event.message_uuid }}"
            status:
              value: "{{event.status}}"
              success:
                values:
                  - delivered
              error:
                values:
                  - rejected
                  - undeliverable
                details: "{{event.error.details}}"
              info:
                values:
                  - submitted
        timeout_seconds: 5
        created_at: "2022-06-23T17:45:31.782Z"
        updated_at: "2022-06-23T17:45:31.782Z"

    SegmentationJob:
      value:
        id: e721113d-0948-4edb-b4af-e3f0578d708c
        name: send sms with optional end-user response
        tags:
          - marketing
          - uk
        definition:
          type: segmentation-job
          recipients:
            include:
              - id: c6a4704e-2ddd-47b7-b79c-7df38feafb3f
                type: list
            exclude:
              - id: fba7c209-ebb9-4b14-8acb-09a803d4f0a0
                type: list
          segmentations:
            - condition:
                expression: item.salary == 1000 || ['UK', 'USA'].includes(item.country)
              action_call:
                action_ref:
                  id: 466ce4a4-9cec-40c0-83ab-c3fa64e48b6f
                  type: action
                parameters:
                  - name: fromNumber
                    value: "447418365541"
                  - name: toNumber
                    value: "{{ item.number }}"
                  - name: message
                    value: "{{ template.message }}"
              name: text vip customers
              description: text UK and USA vip customers
              template:
                type: text
                message:
                  Dear {{ item.firstName }}, {{ item.lastName }} :)\n This's our 1st
                  SMS communication from Vonage campaign.\nReply back with STOP if you want
                  to stop receiving our messages
                encoding: utf8
              recipient:
                correlation_id: "{{item.number}}"
          events_handler:
            matching_strategy: match-first
            matchers:
              - condition:
                  expression: event.text?.toLowerCase().includes('stop')
                action_call:
                  action_ref:
                    type: action
                    id: bd795581-9a93-48b0-a4bc-3b7509bf6e4d
                  parameters:
                    - name: listId
                      value: fba7c209-ebb9-4b14-8acb-09a803d4f0a0
                    - name: number
                      value: "{{event.from}}"
                name: opt-out
                description: unsubscribe
                recipient:
                  correlation_id: "{{event.from}}"
        created_at: "2022-06-24T07:49:33.748Z"
        updated_at: "2022-06-24T07:49:33.748Z"

    SegmentationRun:
      value:
        id: 51aca838-2cf6-4100-b0d2-e74ac0e95c88
        name: E2E Demo run
        job_id: e721113d-0948-4edb-b4af-e3f0578d708c
        status: scheduled
        # todo: should we group the schedule part into a dedicated object?
        start_at: "2022-06-24T04:06:36.000Z"
        end_at: "2022-06-24T08:57:55.917Z"
        created_at: "2022-06-24T07:57:56.301Z"
        updated_at: "2022-06-24T07:57:56.301Z"
